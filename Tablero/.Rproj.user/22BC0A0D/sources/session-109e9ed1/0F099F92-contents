carreras_ganadas <- conteo_ordenado[1:3]
for (i in 1:3) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
conteo_ganadores <- table(ganadores$HorseId)
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
caballos_mas_ganadores <- names(conteo_ordenado)
carreras_ganadas <- conteo_ordenado[1:3]
for (i in 1:3) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
library(flexdashboard)
library(readxl)
HorseRacingResults <- read_excel("C:/santiago/UNIVERSIDAD/QUINTO SEMESTRE/Probabiliad/HorseRacingResults.xlsx",
sheet = "Horse Racing Results")
View(HorseRacingResults)
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 19)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 18)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 1)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 2)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 3)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 4)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 5)
grid()
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 19)
grid()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(flexdashboard)
library(readxl)
HorseRacingResults <- read_excel("C:/santiago/UNIVERSIDAD/QUINTO SEMESTRE/Probabiliad/HorseRacingResults.xlsx",
sheet = "Horse Racing Results")
View(HorseRacingResults)
# Tu tabla de datos
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Imprimir la tabla en la consola
print(data)
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Print the nicely formatted table
cat(kable(data, format = "markdown"))
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Print the nicely formatted table
cat(kable(data))
library(DT)
# Your table of data
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Create an interactive DataTable
datatable(data, options = list(pageLength = 10))
install.packages("flextable")
# Datos del podio
podio <- c(
"El primer caballo con ID 21905 ganó 16 carreras",
"El segundo caballo con ID 23519 ganó 10 carreras",
"El tercer caballo con ID 25939 ganó 10 carreras"
)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio))
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
conteo_ganadores <- table(ganadores$HorseId)
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
caballos_mas_ganadores <- names(conteo_ordenado)
carreras_ganadas <- conteo_ordenado[1:3]
for (i in 1:3) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
library(flextable)
# Datos del podio
podio <- c(
"El primer caballo con ID 21905 ganó 16 carreras",
"El segundo caballo con ID 23519 ganó 10 carreras",
"El tercer caballo con ID 25939 ganó 10 carreras"
)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, width = 0.6, layout = "autofit")
# Mostrar la tabla
tabla_podio
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 ganó 16 carreras",
"El segundo caballo con ID 23519 ganó 10 carreras",
"El tercer caballo con ID 25939 ganó 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, width = 0.6, layout = "autofit")
# Mostrar la tabla
tabla_podio
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "autofit")
# Mostrar la tabla
tabla_podio
options(scipen = 999)
h1=hist(HorseRacingResults$PrizeMoney, main = "Montos de Premios en Resultados de Carreras de Caballos ", xlab = "Dinero del premio en HKD", ylab="frecuencias absolutas", labels=TRUE, col="#6b9493", ylim = c(0,27000))
abline(v=3,col="#f6b915", lwd=4)
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio)
# Mostrar la tabla
tabla_podio
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "fit")
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "autofit_bold_border")
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "autofit")
# Mostrar la tabla
tabla_podio
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "fixed")
# Mostrar la tabla
tabla_podio
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "fit")
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "autofit_bold")
library(flextable)
# Datos del podio (sin tabulaciones ni caracteres especiales)
podio <- c(
"El primer caballo con ID 21905 gano 16 carreras",
"El segundo caballo con ID 23519 gano 10 carreras",
"El tercer caballo con ID 25939 gano 10 carreras"
)
# Eliminar tabulaciones y caracteres especiales
podio_limpio <- gsub("[\t\n\r]", " ", podio)
# Crear una tabla flextable
tabla_podio <- flextable(data = data.frame(Podio = podio_limpio))
# Ajustar el formato y estilo de la tabla
tabla_podio <- set_table_properties(tabla_podio, layout = "autofit")
# Mostrar la tabla
tabla_podio
install.packages("dplyr")
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 19)
grid()
library(dplyr)
# Agrupar los datos por edad y calcular el tiempo promedio
menores_tiempos_por_edad <- HorseRacingResults %>%
group_by(HorseAge) %>%
summarise(TiempoPromedio = mean(RaceTime))
# Encontrar la edad con el menor tiempo promedio
edad_menor_tiempo <- menores_tiempos_por_edad %>%
filter(TiempoPromedio == min(TiempoPromedio)) %>%
pull(HorseAge)
cat("La edad con los menores tiempos promedio es:", edad_menor_tiempo, "años")
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 19)
grid()
library(dplyr)
# Agrupar los datos por edad y calcular el tiempo promedio y el porcentaje del tiempo promedio
menores_tiempos_por_edad <- HorseRacingResults %>%
group_by(HorseAge) %>%
summarise(TiempoPromedio = mean(RaceTime),
PorcentajeTiempo = (mean(RaceTime) / sum(RaceTime)) * 100)
# Encontrar la edad con el menor porcentaje del tiempo promedio
edad_menor_porcentaje <- menores_tiempos_por_edad %>%
filter(PorcentajeTiempo == min(PorcentajeTiempo)) %>%
pull(HorseAge)
cat("La edad con el menor porcentaje del tiempo promedio es:", edad_menor_porcentaje, "años")
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 19)
grid()
library(dplyr)
# Agrupar los datos por edad y calcular el tiempo promedio
menores_tiempos_por_edad <- HorseRacingResults %>%
group_by(HorseAge) %>%
summarise(TiempoPromedio = mean(RaceTime))
# Encontrar la edad con el menor tiempo promedio
edad_menor_tiempo <- menores_tiempos_por_edad %>%
filter(TiempoPromedio == min(TiempoPromedio)) %>%
pull(HorseAge)
cat("La edad con los menores tiempos promedio es:", edad_menor_tiempo, "años")
View(HorseRacingResults)
valueBox(374, icon = "Fa-comments")
options(scipen = 999)
h1=hist(HorseRacingResults$PrizeMoney, main = "Montos de Premios en Resultados de Carreras de Caballos ", xlab = "Dinero del premio en HKD", ylab="frecuencias absolutas", labels=TRUE, col="#6b9493", ylim = c(0,27000))
abline(v=3,col="#f6b915", lwd=4)
plot(HorseRacingResults$HorseAge, HorseRacingResults$RaceTime,
main = "Race Time vs Horse Age",
xlab = "Horse Age", ylab = "Race Time",
col = "#447270", pch = 19)
grid()
library(dplyr)
# Agrupar los datos por edad y calcular el tiempo promedio
menores_tiempos_por_edad <- HorseRacingResults %>%
group_by(HorseAge) %>%
summarise(TiempoPromedio = mean(RaceTime))
# Encontrar la edad con el menor tiempo promedio
edad_menor_tiempo <- menores_tiempos_por_edad %>%
filter(TiempoPromedio == min(TiempoPromedio)) %>%
pull(HorseAge)
cat("La edad con los menores tiempos promedio es:", edad_menor_tiempo, "años")
library(DT)
# Your table of data
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Create an interactive DataTable
datatable(data, options = list(pageLength = 10))
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"), ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los diez caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:10]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:10) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", ifelse(i == 3, "tercer", ifelse(i <= 10, paste(i, "°"), "")))),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
library(DT)
# Your table of data
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Create an interactive DataTable
datatable(data, options = list(pageLength = 10))
# y tienes las variables HorseId y FinalPlace
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los tres caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:3]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:3) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
library(DT)
# Your table of data
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Create an interactive DataTable
datatable(data, options = list(pageLength = 10))
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"), ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los diez caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:10]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:10) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", ifelse(i == 3, "tercer", ifelse(i <= 10, paste(i, "°"), "")))),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los diez caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:10]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:10) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", ifelse(i == 3, "tercer", ifelse(i <= 10, paste(i, "°"), "")))),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
library(DT)
# Your table of data
data <- data.frame(
Distance = c(1000, 1200, 1400, 1600, 1650, 1800, 2000, 2200, 2400),
RaceTime = c(54.69, 67.27, 79.92, 92.64, 96.75, 105.25, 118.81, 133.47, 144.77)
)
# Create an interactive DataTable
datatable(data, options = list(pageLength = 10))
# Supongamos que tu conjunto de datos se llama HorseRacingResults
# y tienes las variables HorseId y FinalPlace
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Encontrar el máximo valor de victorias
max_victorias <- max(conteo_ganadores)
# Encontrar el nombre del caballo que ganó más veces
caballo_mas_ganador <- names(conteo_ganadores[conteo_ganadores == max_victorias])
# Mostrar el resultado (ID del caballo y carreras ganadas)
print(paste("El caballo con ID", caballo_mas_ganador, "ganó", carreras_ganadas, "carreras"))
# Supongamos que tu conjunto de datos se llama HorseRacingResults
# y tienes las variables HorseId y FinalPlace
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los tres caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:3]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:3) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
}
# Supongamos que tu conjunto de datos se llama HorseRacingResults
# y tienes las variables HorseId y FinalPlace
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los tres caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:4]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:4) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
}
# Supongamos que tu conjunto de datos se llama HorseRacingResults
# y tienes las variables HorseId y FinalPlace
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los tres caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:7]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:7) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
}
# Supongamos que tu conjunto de datos se llama HorseRacingResults
# y tienes las variables HorseId y FinalPlace
# Filtrar solo los casos donde el caballo ganó (ajusta el valor según tu dataset)
ganadores <- HorseRacingResults[HorseRacingResults$FinalPlace == "1", ]
# Contar las ocurrencias únicas de HorseId
conteo_ganadores <- table(ganadores$HorseId)
# Ordenar el conteo de ganadores en orden descendente
conteo_ordenado <- sort(conteo_ganadores, decreasing = TRUE)
# Obtener los nombres de los caballos que ganaron más veces
caballos_mas_ganadores <- names(conteo_ordenado)
# Obtener las cantidades de carreras ganadas por los tres caballos más ganadores
carreras_ganadas <- conteo_ordenado[1:10]
# Mostrar el resultado (ID del caballo y carreras ganadas)
for (i in 1:10) {
print(paste("El", ifelse(i == 1, "primer", ifelse(i == 2, "segundo", "tercer")),
"caballo con ID", caballos_mas_ganadores[i], "ganó", carreras_ganadas[i], "carreras"))
}
